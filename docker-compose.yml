version: '2.3'
services:
  redis:
    image: redislabs/redisgraph:2.2.15
    ports:
      - "6379:6379"
    mem_limit: 8gb
    environment:
      - PYTHONUNBUFFERED=0

  jaeger:
    image: jaegertracing/all-in-one:1.24
    command: --log-level=debug --query.max-clock-skew-adjustment=1s
    # environment:
    #   - SPAN_STORAGE_TYPE=badger
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686
      - 14268:14268
      - 9411:9411
    volumes:
      - /etc/localtime:/etc/localtime:ro

  worker-profile-rating:
    image: arruda/worker-profile-rating:${IMAGE_TAG}
    command: python /service/worker_profile_rating/run.py
    depends_on:
      - redis

    environment:
      - PYTHONUNBUFFERED=0
      - REDIS_ADDRESS=${REDIS_ADDRESS}
      - REDIS_PORT=${REDIS_PORT}
      - TRACER_REPORTING_HOST=${TRACER_REPORTING_HOST}
      - TRACER_REPORTING_PORT=${TRACER_REPORTING_PORT}
      - SERVICE_STREAM_KEY=${WORKER_PROFILE_RATING_STREAM_KEY}
      - LISTEN_EVENT_TYPE_SERVICE_WORKER_ANNOUNCED=${EVENT_TYPE_SERVICE_WORKER_ANNOUNCED}
      - PUB_EVENT_TYPE_WORKER_PROFILE_RATED=${EVENT_TYPE_WORKER_PROFILE_RATED}
      - RATING_CLASS=${RATING_CLASS}
      - QOS_CRITERIA=${INTERNAL_QOS_CRITERIA}
      - LOGGING_LEVEL=${LOGGING_LEVEL}

  slr-worker-ranking:
    image: arruda/slr-worker-ranking:${IMAGE_TAG}
    command: python /service/slr_worker_ranking/run.py
    depends_on:
      - redis

    environment:
      - PYTHONUNBUFFERED=0
      - REDIS_ADDRESS=${REDIS_ADDRESS}
      - REDIS_PORT=${REDIS_PORT}
      - TRACER_REPORTING_HOST=${TRACER_REPORTING_HOST}
      - TRACER_REPORTING_PORT=${TRACER_REPORTING_PORT}
      - SERVICE_STREAM_KEY=${SLR_WORKER_RANKING_STREAM_KEY}
      - LISTEN_EVENT_TYPE_WORKER_PROFILE_RATED=${EVENT_TYPE_WORKER_PROFILE_RATED}
      - LISTEN_EVENT_TYPE_QUERY_SERVICES_QOS_CRITERIA_RANKED=${EVENT_TYPE_QUERY_SERVICES_QOS_CRITERIA_RANKED}
      - PUB_EVENT_TYPE_SERVICE_SLR_PROFILES_RANKED=${EVENT_TYPE_SERVICE_SLR_PROFILES_RANKED}
      - RANKER_CRITERIA=${RANKER_CRITERIA}
      - RANKER_TYPE=${RANKER_TYPE}
      - LOGGING_LEVEL=${LOGGING_LEVEL}

  client-manager:
    image: arruda/client-manager:${IMAGE_TAG}
    command: python /service/client_manager/run.py
    depends_on:
      - redis

    environment:
      - PYTHONUNBUFFERED=0
      - REDIS_ADDRESS=${REDIS_ADDRESS}
      - REDIS_PORT=${REDIS_PORT}
      - TRACER_REPORTING_HOST=${TRACER_REPORTING_HOST}
      - TRACER_REPORTING_PORT=${TRACER_REPORTING_PORT}
      - SERVICE_STREAM_KEY=${CLIENT_MANAGER_STREAM_KEY}
      - PUB_EVENT_TYPE_QUERY_CREATED=${EVENT_TYPE_QUERY_CREATED}
      - PUB_EVENT_TYPE_QUERY_REMOVED=${EVENT_TYPE_QUERY_REMOVED}
      - LISTEN_EVENT_TYPE_QUERY_RECEIVED=${EVENT_TYPE_QUERY_RECEIVED}
      - LISTEN_EVENT_TYPE_QUERY_DELETION_REQUESTED=${EVENT_TYPE_QUERY_DELETION_REQUESTED}
      - LISTEN_EVENT_TYPE_PUBLISHER_CREATED=${EVENT_TYPE_PUBLISHER_CREATED}
      - LISTEN_EVENT_TYPE_PUBLISHER_REMOVED=${EVENT_TYPE_PUBLISHER_REMOVED}
      - LISTEN_EVENT_TYPE_SERVICE_WORKER_ANNOUNCED=${EVENT_TYPE_SERVICE_WORKER_ANNOUNCED}
      - LOGGING_LEVEL=${LOGGING_LEVEL}

  query-planner:
    image: arruda/query-planner:${IMAGE_TAG}
    command: python /service/query_planner/run.py
    depends_on:
      - redis

    environment:
      - PYTHONUNBUFFERED=0
      - REDIS_ADDRESS=${REDIS_ADDRESS}
      - REDIS_PORT=${REDIS_PORT}
      - TRACER_REPORTING_HOST=${TRACER_REPORTING_HOST}
      - TRACER_REPORTING_PORT=${TRACER_REPORTING_PORT}
      - SERVICE_STREAM_KEY=${QUERY_PLANNER_STREAM_KEY}
      - LISTEN_EVENT_TYPE_QUERY_CREATED=${EVENT_TYPE_QUERY_CREATED}
      - PUB_EVENT_TYPE_QUERY_SERVICES_QOS_CRITERIA_RANKED=${EVENT_TYPE_QUERY_SERVICES_QOS_CRITERIA_RANKED}
      - QOS_RANKER_CLASS=${QOS_RANKER_CLASS}
      - QOS_CRITERIA=${USER_QOS_CRITERIA}
      - LOGGING_LEVEL=${LOGGING_LEVEL}

  adaptation-monitor:
    image: arruda/adaptation-monitor:${IMAGE_TAG}
    command: python /service/adaptation_monitor/run.py
    depends_on:
      - redis

    environment:
      - PYTHONUNBUFFERED=0
      - REDIS_ADDRESS=${REDIS_ADDRESS}
      - REDIS_PORT=${REDIS_PORT}
      - TRACER_REPORTING_HOST=${TRACER_REPORTING_HOST}
      - TRACER_REPORTING_PORT=${TRACER_REPORTING_PORT}
      - SERVICE_STREAM_KEY=${ADAPTATION_MONITOR_STREAM_KEY}
      - LISTEN_EVENT_TYPE_SERVICE_WORKER_ANNOUNCED=${EVENT_TYPE_SERVICE_WORKER_ANNOUNCED}
      - LISTEN_EVENT_TYPE_REPEAT_MONITOR_STREAMS_SIZE_REQUESTED=${EVENT_TYPE_REPEAT_MONITOR_STREAMS_SIZE_REQUESTED}
      - PUB_EVENT_TYPE_REPEAT_MONITOR_STREAMS_SIZE_REQUESTED=${EVENT_TYPE_REPEAT_MONITOR_STREAMS_SIZE_REQUESTED}
      - PUB_EVENT_TYPE_SERVICE_WORKERS_STREAM_MONITORED=${EVENT_TYPE_SERVICE_WORKERS_STREAM_MONITORED}
      - LOGGING_LEVEL=${LOGGING_LEVEL}

  adaptation-analyser:
    image: arruda/adaptation-analyser:${IMAGE_TAG}
    command: python /service/adaptation_analyser/run.py
    depends_on:
      - redis

    environment:
      - PYTHONUNBUFFERED=0
      - REDIS_ADDRESS=${REDIS_ADDRESS}
      - REDIS_PORT=${REDIS_PORT}
      - TRACER_REPORTING_HOST=${TRACER_REPORTING_HOST}
      - TRACER_REPORTING_PORT=${TRACER_REPORTING_PORT}
      - SERVICE_STREAM_KEY=${ADAPTATION_ANALYSER_STREAM_KEY}
      - LISTEN_EVENT_TYPE_SERVICE_WORKERS_STREAM_MONITORED=${EVENT_TYPE_SERVICE_WORKERS_STREAM_MONITORED}
      - LISTEN_EVENT_TYPE_QUERY_CREATED=${EVENT_TYPE_QUERY_CREATED}
      - LISTEN_EVENT_TYPE_SERVICE_WORKER_ANNOUNCED=${EVENT_TYPE_SERVICE_WORKER_ANNOUNCED}
      - LISTEN_EVENT_TYPE_SERVICE_SLR_PROFILES_RANKED=${EVENT_TYPE_SERVICE_SLR_PROFILES_RANKED}
      - LISTEN_EVENT_TYPE_SCHEDULING_PLAN_EXECUTED=${EVENT_TYPE_SCHEDULING_PLAN_EXECUTED}
      - PUB_EVENT_TYPE_NEW_QUERY_SCHEDULING_PLAN_REQUESTED=${EVENT_TYPE_NEW_QUERY_SCHEDULING_PLAN_REQUESTED}
      - PUB_EVENT_TYPE_SERVICE_WORKER_SLR_PROFILE_CHANGE_PLAN_REQUESTED=${EVENT_TYPE_SERVICE_WORKER_SLR_PROFILE_CHANGE_PLAN_REQUESTED}
      - PUB_EVENT_TYPE_SERVICE_WORKER_OVERLOADED_PLAN_REQUESTED=${EVENT_TYPE_SERVICE_WORKER_OVERLOADED_PLAN_REQUESTED}
      - PUB_EVENT_TYPE_SERVICE_WORKER_BEST_IDLE_REQUESTED=${EVENT_TYPE_SERVICE_WORKER_BEST_IDLE_REQUESTED}
      - PUB_EVENT_TYPE_UNNECESSARY_LOAD_SHEDDING_REQUESTED=${EVENT_TYPE_UNNECESSARY_LOAD_SHEDDING_REQUESTED}
      - LOGGING_LEVEL=${LOGGING_LEVEL}

  adaptation-planner:
    image: arruda/adaptation-planner:${IMAGE_TAG}
    command: python /service/adaptation_planner/run.py
    depends_on:
      - redis

    environment:
      - PYTHONUNBUFFERED=0
      - REDIS_ADDRESS=${REDIS_ADDRESS}
      - REDIS_PORT=${REDIS_PORT}
      - TRACER_REPORTING_HOST=${TRACER_REPORTING_HOST}
      - TRACER_REPORTING_PORT=${TRACER_REPORTING_PORT}
      - SERVICE_STREAM_KEY=${ADAPTATION_PLANNER_STREAM_KEY}
      - LISTEN_EVENT_TYPE_QUERY_CREATED=${EVENT_TYPE_QUERY_CREATED}
      - LISTEN_EVENT_TYPE_SERVICE_WORKERS_STREAM_MONITORED=${EVENT_TYPE_SERVICE_WORKERS_STREAM_MONITORED}
      - LISTEN_EVENT_TYPE_SERVICE_SLR_PROFILES_RANKED=${EVENT_TYPE_SERVICE_SLR_PROFILES_RANKED}
      - LISTEN_EVENT_TYPE_NEW_QUERY_SCHEDULING_PLAN_REQUESTED=${EVENT_TYPE_NEW_QUERY_SCHEDULING_PLAN_REQUESTED}
      - LISTEN_EVENT_TYPE_SERVICE_WORKER_OVERLOADED_PLAN_REQUESTED=${EVENT_TYPE_SERVICE_WORKER_OVERLOADED_PLAN_REQUESTED}
      - LISTEN_EVENT_TYPE_SERVICE_WORKER_SLR_PROFILE_CHANGE_PLAN_REQUESTED=${EVENT_TYPE_SERVICE_WORKER_SLR_PROFILE_CHANGE_PLAN_REQUESTED}
      - LISTEN_EVENT_TYPE_SERVICE_WORKER_BEST_IDLE_REQUESTED=${EVENT_TYPE_SERVICE_WORKER_BEST_IDLE_REQUESTED}
      - LISTEN_EVENT_TYPE_UNNECESSARY_LOAD_SHEDDING_REQUESTED=${EVENT_TYPE_UNNECESSARY_LOAD_SHEDDING_REQUESTED}
      - PUB_EVENT_TYPE_NEW_QUERY_SCHEDULING_PLANNED=${EVENT_TYPE_NEW_QUERY_SCHEDULING_PLANNED}
      - PUB_EVENT_TYPE_SERVICE_WORKER_OVERLOADED_PLANNED=${EVENT_TYPE_SERVICE_WORKER_OVERLOADED_PLANNED}
      - PUB_EVENT_TYPE_SERVICE_WORKER_SLR_PROFILE_PLANNED=${EVENT_TYPE_SERVICE_WORKER_SLR_PROFILE_PLANNED}
      - PUB_EVENT_TYPE_SERVICE_WORKER_BEST_IDLE_PLANNED=${EVENT_TYPE_SERVICE_WORKER_BEST_IDLE_PLANNED}
      - PUB_EVENT_TYPE_UNNECESSARY_LOAD_SHEDDING_PLANNED=${EVENT_TYPE_UNNECESSARY_LOAD_SHEDDING_PLANNED}
      - SCHEDULER_PLANNER_TYPE=${SCHEDULER_PLANNER_TYPE}
      - LOGGING_LEVEL=${LOGGING_LEVEL}

  scheduler:
    image: arruda/scheduler:${IMAGE_TAG}
    command: python /service/scheduler/run.py
    depends_on:
      - redis

    environment:
      - PYTHONUNBUFFERED=0
      - REDIS_ADDRESS=${REDIS_ADDRESS}
      - REDIS_PORT=${REDIS_PORT}
      - TRACER_REPORTING_HOST=${TRACER_REPORTING_HOST}
      - TRACER_REPORTING_PORT=${TRACER_REPORTING_PORT}
      - SERVICE_STREAM_KEY=${SCHEDULER_STREAM_KEY}
      - LISTEN_EVENT_TYPE_NEW_QUERY_SCHEDULING_PLANNED=${EVENT_TYPE_NEW_QUERY_SCHEDULING_PLANNED}
      - LISTEN_EVENT_TYPE_SERVICE_WORKER_SLR_PROFILE_PLANNED=${EVENT_TYPE_SERVICE_WORKER_SLR_PROFILE_PLANNED}
      - LISTEN_EVENT_TYPE_SERVICE_WORKER_OVERLOADED_PLANNED=${EVENT_TYPE_SERVICE_WORKER_OVERLOADED_PLANNED}
      - LISTEN_EVENT_TYPE_SERVICE_WORKER_BEST_IDLE_PLANNED=${EVENT_TYPE_SERVICE_WORKER_BEST_IDLE_PLANNED}
      - LISTEN_EVENT_TYPE_UNNECESSARY_LOAD_SHEDDING_PLANNED=${EVENT_TYPE_UNNECESSARY_LOAD_SHEDDING_PLANNED}
      - PUB_EVENT_TYPE_SCHEDULING_PLAN_EXECUTED=${EVENT_TYPE_SCHEDULING_PLAN_EXECUTED}
      - LOGGING_LEVEL=${LOGGING_LEVEL}
    volumes:
      - /etc/localtime:/etc/localtime:ro

  # preprocessor:
  #   image: arruda/preprocessing-service:${IMAGE_TAG}
  #   command: python /service/preprocessing/run.py
  #   depends_on:
  #     - redis

  #   environment:
  #     - PYTHONUNBUFFERED=0
  #     - REDIS_ADDRESS=${REDIS_ADDRESS}
  #     - REDIS_PORT=${REDIS_PORT}
  #     - TRACER_REPORTING_HOST=${TRACER_REPORTING_HOST}
  #     - TRACER_REPORTING_PORT=${TRACER_REPORTING_PORT}
  #     - SERVICE_STREAM_KEY=${PREPROCESSOR_STREAM_KEY}
  #     - LISTEN_EVENT_TYPE_QUERY_CREATED=${EVENT_TYPE_QUERY_CREATED}
  #     - LISTEN_EVENT_TYPE_QUERY_REMOVED=${EVENT_TYPE_QUERY_REMOVED}
  #     - FFMPEG_BIN=/service/ffmpeg_bin/ffmpeg-linux64-v3.3.1
  #     - REDIS_EXPIRATION_TIME=${REDIS_EXPIRATION_TIME}
  #     - LOGGING_LEVEL=${LOGGING_LEVEL}

  event-dispatcher:
    image: arruda/event-dispatcher:${IMAGE_TAG}
    command: python /service/event_dispatcher/run.py
    depends_on:
      - redis

    environment:
      - PYTHONUNBUFFERED=0
      - REDIS_ADDRESS=${REDIS_ADDRESS}
      - REDIS_PORT=${REDIS_PORT}
      - TRACER_REPORTING_HOST=${TRACER_REPORTING_HOST}
      - TRACER_REPORTING_PORT=${TRACER_REPORTING_PORT}
      - SERVICE_STREAM_KEY=${EVENT_DISPATCHER_STREAM_KEY}
      - LISTEN_EVENT_TYPE_QUERY_CREATED=${EVENT_TYPE_QUERY_CREATED}
      - LISTEN_EVENT_TYPE_QUERY_REMOVED=${EVENT_TYPE_QUERY_REMOVED}
      - LOGGING_LEVEL=${LOGGING_LEVEL}
    volumes:
      - /etc/localtime:/etc/localtime:ro

  window-manager:
    image: arruda/window-manager:${IMAGE_TAG}
    command: python /service/window_manager/run.py
    depends_on:
      - redis

    environment:
      - PYTHONUNBUFFERED=0
      - REDIS_ADDRESS=${REDIS_ADDRESS}
      - REDIS_PORT=${REDIS_PORT}
      - TRACER_REPORTING_HOST=${TRACER_REPORTING_HOST}
      - TRACER_REPORTING_PORT=${TRACER_REPORTING_PORT}
      - SERVICE_STREAM_KEY=${WINDOW_MANAGER_STREAM_KEY}
      - MATCHER_STREAM_KEY=${MATCHER_STREAM_KEY}
      - LISTEN_EVENT_TYPE_QUERY_CREATED=${EVENT_TYPE_QUERY_CREATED}
      - LISTEN_EVENT_TYPE_QUERY_REMOVED=${EVENT_TYPE_QUERY_REMOVED}
      - LOGGING_LEVEL=${LOGGING_LEVEL}
    volumes:
      - /etc/localtime:/etc/localtime:ro

  matcher:
    image: arruda/matcher:${IMAGE_TAG}
    command: python /service/matcher/run.py
    depends_on:
      - redis

    environment:
      - PYTHONUNBUFFERED=0
      - REDIS_ADDRESS=${REDIS_ADDRESS}
      - REDIS_PORT=${REDIS_PORT}
      - TRACER_REPORTING_HOST=${TRACER_REPORTING_HOST}
      - TRACER_REPORTING_PORT=${TRACER_REPORTING_PORT}
      - SERVICE_STREAM_KEY=${MATCHER_STREAM_KEY}
      - FORWARDER_STREAM_KEY=${FORWARDER_STREAM_KEY}
      - LISTEN_EVENT_TYPE_QUERY_CREATED=${EVENT_TYPE_QUERY_CREATED}
      - LISTEN_EVENT_TYPE_QUERY_REMOVED=${EVENT_TYPE_QUERY_REMOVED}
      - LOGGING_LEVEL=${LOGGING_LEVEL}
    volumes:
      - /etc/localtime:/etc/localtime:ro

  forwarder:
    image: arruda/forwarder:${IMAGE_TAG}
    command: python /service/forwarder/run.py
    depends_on:
      - redis

    environment:
      - PYTHONUNBUFFERED=0
      - REDIS_ADDRESS=${REDIS_ADDRESS}
      - REDIS_PORT=${REDIS_PORT}
      - TRACER_REPORTING_HOST=${TRACER_REPORTING_HOST}
      - TRACER_REPORTING_PORT=${TRACER_REPORTING_PORT}
      - SERVICE_STREAM_KEY=${FORWARDER_STREAM_KEY}
      - LISTEN_EVENT_TYPE_QUERY_CREATED=${EVENT_TYPE_QUERY_CREATED}
      - LISTEN_EVENT_TYPE_QUERY_REMOVED=${EVENT_TYPE_QUERY_REMOVED}
      - LOGGING_LEVEL=${LOGGING_LEVEL}
    volumes:
      - /etc/localtime:/etc/localtime:ro

  videostreamforwarder:
    image: arruda/videostreamforwarder:${IMAGE_TAG}
    command: python /service/videostreamforwarder/run.py
    depends_on:
      - redis

    environment:
      - PYTHONUNBUFFERED=0
      - REDIS_ADDRESS=${REDIS_ADDRESS}
      - REDIS_PORT=${REDIS_PORT}
      - TRACER_REPORTING_HOST=${TRACER_REPORTING_HOST}
      - TRACER_REPORTING_PORT=${TRACER_REPORTING_PORT}
      - SERVICE_STREAM_KEY=${VIDEOSTREAMFORWARDER_STREAM_KEY}
      - LISTEN_EVENT_TYPE_QUERY_CREATED=${EVENT_TYPE_QUERY_CREATED}
      - LISTEN_EVENT_TYPE_QUERY_REMOVED=${EVENT_TYPE_QUERY_REMOVED}
      - SUPPORTED_VIDEO_OUTPUT_TYPES=${SUPPORTED_VIDEO_OUTPUT_TYPES}
      - OUPUT_MEDIA_SERVER_URL=${OUPUT_MEDIA_SERVER_URL}
      - LOGGING_LEVEL=${LOGGING_LEVEL}
    volumes:
      - /etc/localtime:/etc/localtime:ro

  access-point:
    image: arruda/access-point:${IMAGE_TAG}
    command: python /service/access_point/run.py
    depends_on:
      - redis
    ports:
      - "8000:8000"

    environment:
      - PYTHONUNBUFFERED=0
      - REDIS_ADDRESS=${REDIS_ADDRESS}
      - REDIS_PORT=${REDIS_PORT}
      - TRACER_REPORTING_HOST=${TRACER_REPORTING_HOST}
      - TRACER_REPORTING_PORT=${TRACER_REPORTING_PORT}
      - AP_WEBSOCKET_HOST=${AP_WEBSOCKET_HOST}
      - SERVICE_STREAM_KEY=${ACCESS_POINT_STREAM_KEY}
      - LISTEN_EVENT_TYPE_QUERY_CREATED=${EVENT_TYPE_QUERY_CREATED}
      - LISTEN_EVENT_TYPE_PUBLISHER_CREATED=${EVENT_TYPE_PUBLISHER_CREATED}
      - PUB_EVENT_TYPE_QUERY_RECEIVED=${EVENT_TYPE_QUERY_RECEIVED}
      - PUB_EVENT_TYPE_PUBLISHER_CREATED=${EVENT_TYPE_PUBLISHER_CREATED}
      - SUBSCRIBER_MEDIA_SERVER_URL=${SUBSCRIBER_MEDIA_SERVER_URL}
      - LOGGING_LEVEL=${LOGGING_LEVEL}
    volumes:
      - /etc/localtime:/etc/localtime:ro
